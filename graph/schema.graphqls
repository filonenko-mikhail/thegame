# GraphQL schema example
#
# https://gqlgen.com/getting-started/

directive @goField(
	forceResolver: Boolean
	name: String
) on INPUT_FIELD_DEFINITION | FIELD_DEFINITION

type DiceQueries {
  val: Int! @goField(forceResolver: true)
}

type DiceMutations {
  set(val:Int!): Int! @goField(forceResolver: true)
}

type IntuitionQueries {
  val: Boolean! @goField(forceResolver: true)
}

type IntuitionMutations {
  set(val:Boolean!): Boolean! @goField(forceResolver: true)
}

type Card {
  id: ID!
  text: String!
  x: Float!
  y: Float!
  color: Int!
  flipable: Boolean!
  flip: Boolean!
  fliptext: String!
  prio: Int!
  sizex: Float!
  sizey: Float!
}

input CardAddPayload {
  id: ID!
  text: String!
  x: Float!
  y: Float!
  color: Int!
  flipable: Boolean!
  flip: Boolean!
  fliptext: String!
  prio: Int!
  sizex: Float!
  sizey: Float!
}

input CardMovePayload {
  id: ID!
  x: Float!
  y: Float!
}

input CardFlipPayload {
  id: ID!
  flip: Boolean!
}

input CardPrioPayload {
  id: ID!
  prio: Int!
}

input CardRemovePayload {
  id: ID!
}

type CardQueries {
  list: [Card!]! @goField(forceResolver: true)
}

type CardMutations {
  add(payload: CardAddPayload!): Card! @goField(forceResolver: true)
  move(payload: CardMovePayload): Card! @goField(forceResolver: true)
  remove(payload: CardRemovePayload): Card! @goField(forceResolver: true)
  flip(payload: CardFlipPayload): Card! @goField(forceResolver: true)
  prio(payload: CardPrioPayload): Card! @goField(forceResolver: true)
}

type Chip {
  id: ID!
  color: Int!
  x: Float!
  y: Float!
}

input ChipAddPayload {
  id: ID!
  color: Int!
  x: Float!
  y: Float!
}

input ChipMovePayload {
  id: ID!
  x: Float!
  y: Float!
}

type ChipQueries {
  list: [Chip!]! @goField(forceResolver: true)
}

type ChipMutations {
  add(payload: ChipAddPayload!): Chip! @goField(forceResolver: true)
  move(payload: CardMovePayload): Chip! @goField(forceResolver: true)
  remove(payload: CardRemovePayload): Chip! @goField(forceResolver: true)
}

enum ContentType {
  ANGEL,
  PHYSICAL_KNOWING,
  EMOTIONAL_KNOWING,
  MENTAL_KNOWING,
  SPIRIT_KNOWING,

  INSIGHT,
  SETBACK,
  FEEDBACK
}

type Content {
  id: ID!
  type: ContentType
  title: String
  description: String
}

type ContentQueries {
  list: [Content!]! @goField(forceResolver: true)
}

type Query {
  dice: DiceQueries!
  card: CardQueries!
  chip: ChipQueries!
  intuition: IntuitionQueries!
  content: ContentQueries!
}

type Mutation {
  dice: DiceMutations!
  card: CardMutations!
  chip: ChipMutations!
  intuition: IntuitionMutations!
}

type CardAddEvent {
  id: ID!
  text: String!
  x: Float!
  y: Float!
  color: Int!
  flipable: Boolean!
  flip: Boolean!
  fliptext: String!
  prio: Int!
  sizex: Float!
  sizey: Float!
}

type CardRemoveEvent {
  id: ID!
}

type CardMoveEvent {
  id: ID!
  x: Float!
  y: Float!
}

type CardPrioEvent {
  id: ID!
  prio: Int!
}

type CardFlipEvent {
  id: ID!
  flip: Boolean!
}

type CardEvent {
  add: CardAddEvent
  remove: CardRemoveEvent
  move: CardMoveEvent
  prio: CardPrioEvent
  flip: CardFlipEvent
}

type ChipAddEvent {
  id: ID!
  color: Int!
  x: Float!
  y: Float!
}

type ChipRemoveEvent {
  id: ID!
}

type ChipMoveEvent {
  id: ID!
  x: Float!
  y: Float!
}

type ChipEvent {
  add: ChipAddEvent
  remove: ChipRemoveEvent
  move: ChipMoveEvent
}

type Subscription {
  dice: Int!
  card: CardEvent!
  chip: ChipEvent!
  intuition: Boolean!
}
